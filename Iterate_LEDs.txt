//DOES NOT WORK
module rom_case(out, PC); //10
    output reg[15:0] out;
    input [7:0] PC; //address- 8 deep memory
    
    always @(PC) begin
        case(PC)
				///////Initiate Data///////////
				8'b00000000 :	out[15:0]<=16'b0100011111010010;	//R7<-NOT R2
				8'b00000001 : 	out[15:0]<=16'b1110000011111111; //LRI R4 255
				8'b00000010 :	out[15:0]<=16'b0000110011110101; //ADDI R4 245
				8'b00000011 :	out[15:0]<=16'b0110001100100100; //NEG R4
				8'b00000100 :	out[15:0]<=16'b0010101000000010; //ORI R2 2
				
				8'b00000101 :  out[15:0]<=16'b1010101000000000;	//Write R2 to AD 0
				8'b00000110 :  out[15:0]<=16'b1010101000000001;	//Write R2 to AD 1
				8'b00000111 :  out[15:0]<=16'b1010101000000010;	//Write R2 to AD 2
				8'b00001000 :  out[15:0]<=16'b1010101000000011;	//Write R2 to AD 3
				8'b00001001 :  out[15:0]<=16'b1010101000000100;	//Write R2 to AD 4
				8'b00001010 :  out[15:0]<=16'b1010101000000101;	//Write R2 to AD 5
				8'b00001011 :  out[15:0]<=16'b1010101000000110;	//Write R2 to AD 6
				8'b00001100 :  out[15:0]<=16'b1010101000000111;	//Write R2 to AD 7
				
				////////////Main///////////////
				8'b00001101 :	out[15:0]<=16'b1001110000100000; //CALL FXN1
				8'b00001110 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00001111 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00010000 :	out[15:0]<=16'b1001101011111100; //JMPR to 5
		  
				////////FXN1////////////Iterate through lights
				8'b00100000 :  out[15:0]<=16'b1010111100000000;	//Write R7 to AD 0
//				8'b00100001 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00100010 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00100011 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00100100 :  out[15:0]<=16'b1010101000000000;	//Write R2 to AD 0
				8'b00100101 :  out[15:0]<=16'b1010111100000001;	//Write R7 to AD 1
//				8'b00100110 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00100111 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00101000 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00101001 :  out[15:0]<=16'b1010101000000001;	//Write R2 to AD 1
				8'b00101010 :  out[15:0]<=16'b1010111100000010;	//Write R7 to AD 2
//				8'b00101011 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00101100 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00101101 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00101110 :  out[15:0]<=16'b1010101000000010;	//Write R2 to AD 2
				8'b00101111 :  out[15:0]<=16'b1010111100000011;	//Write R7 to AD 3
//				8'b00110000 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00110001 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00110010 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00110011 :  out[15:0]<=16'b1010101000000011;	//Write R2 to AD 3
				8'b00110100 :  out[15:0]<=16'b1010111100000100;	//Write R7 to AD 4
//				8'b00110101 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00110110 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00110111:	out[15:0]<=16'b0000000000000000; //NOP
				8'b00111000 :  out[15:0]<=16'b1010101000000100;	//Write R2 to AD 4
				8'b00111001 :  out[15:0]<=16'b1010111100000101;	//Write R7 to AD 5
//				8'b00111010 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b00111011 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00111100 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b00111101 :  out[15:0]<=16'b1010101000000101;	//Write R2 to AD 5
				8'b00111110 :  out[15:0]<=16'b1010111100000110;	//Write R7 to AD 6
//				8'b00111111 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b01000000 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b01000001 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b01000010 :  out[15:0]<=16'b1010101000000110;	//Write R2 to AD 6
				8'b01000011 :  out[15:0]<=16'b1010111100000111;	//Write R7 to AD 7
//				8'b01000100 :	out[15:0]<=16'b1001110010000000; //CALL FXN 2
				8'b01000101 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b01000110 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b01000111 :  out[15:0]<=16'b1010101000000111;	//Write R2 to AD 7
				8'b01001000 :	out[15:0]<=16'b1001101010110111; //JUMP
//				8'b01001000 :	out[15:0]<=16'b1001111000000000; //RET
				
				
				////////FXN2////////// Wait
				8'b10000000 :	out[15:0]<=16'b0101100100100100; //MOVA R4, R4
				8'b10000010 :	out[15:0]<=16'b1011110000000101; //BRN R4 5
				8'b10000011 : 	out[15:0]<=16'b1110000011111111; //LRI R4 255
				8'b10000100 :	out[15:0]<=16'b0000110011110101; //ADDI R4 245
				8'b10000101 :	out[15:0]<=16'b0110001100100100; //NEG R4
				8'b10000110 :	out[15:0]<=16'b1001111000000000; //RET
				8'b10000111 :	out[15:0]<=16'b0000000000000000; //NOP
				8'b10001000 :	out[15:0]<=16'b0110000100100100; //INC R4
				8'b10001001 :	out[15:0]<=16'b1001101100110110; //JUMP to "BRN R4 3"
				
				

		  
//		  //LDI
//        8'b00000001 : out[15:0]<=16'b1010000100001010; //LOADS MEMORY 10 INTO R1
//		  
//		  //NEG
//		  8'b00000010 : out[15:0]<=16'b0110001010010010; //NEG R2
//		  
//		  //BRN
//        8'b00000011 : out[15:0]<=16'b1011101000000010; //BRN R2, 2
//		  
//		  //JUMPR
//        8'b00000100 : out[15:0]<=16'b1001101011111010; //JUMP TO ADDRESS to 0
//		  
//		  //LRI
//		  8'b00000101 : out[15:0]<=16'b1101100000000011; //load 3 into R3
//		  
//		  //STI
//		  8'b00000110 : out[15:0]<=16'b1010101100000011; //Write R3 to AD 3
//		  
//		  //ORI 
//		  8'b00000111 : out[15:0]<=16'b0000101100000011; //ORI R3, 2
//		  
//		  //STI
//		  8'b00001000 : out[15:0]<=16'b1010101100000011; //Write R3 to AD 3
//        
//      //JUMPR
//      8'b00001001 : out[15:0]<=16'b1001101011110110; //JUMP TO ADDRESS to 0
//            
//        default: out = 16'b0000000000000000; //NOP
        endcase
    end
endmodule // rom_case