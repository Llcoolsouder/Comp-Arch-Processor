module rom_case(out, PC); //10
    output reg[15:0] out;
    input [7:0] PC; //address- 8 deep memory
    
    always @(PC) begin
        case(PC)
				8'b00000000 :	 out[15:0]<=16'b0100011111010010;	//R7<-NOT R2
				8'b00000001 :	 out[15:0]<=16'b0010101100000010; 	//ORI R3 2
				
            8'b00000010 :   out[15:0]<=16'b1010111100000000;	//Write R7 AD 0
				8'b00000011 :   out[15:0]<=16'b0000000000000000;	//1010111100000001;//NOP or Write R7 AD 1
				8'b00000100 :   out[15:0]<=16'b1010111100000010;	//Write R7 AD 2
            8'b00000101 :   out[15:0]<=16'b0000000000000000;	//1010111100000011;//NOP or Write R7 AD 3
            8'b00000110 :   out[15:0]<=16'b1010111100000100;	//Write R7 AD 4
            8'b00000111 :   out[15:0]<=16'b1010111100000101;	//Write R7 AD 5
            8'b00001000 :   out[15:0]<=16'b1010111100000110;	//Write R7 AD 6 
				8'b00001001 :	 out[15:0]<=16'b1010111100000111;	//Write R7 AD 7
				
				8'b00001010 :   out[15:0]<=16'b1010101100000000;	//Write R3 AD 0
				8'b00001011 :   out[15:0]<=16'b0000000000000000;	//1010111100000001;//NOP or Write R3 AD 1
				8'b00001100 :   out[15:0]<=16'b1010101100000010;	//Write R3 AD 2
            8'b00001101 :   out[15:0]<=16'b0000000000000000;	//1010111100000011;//NOP or Write R3 AD 3
            8'b00001110 :   out[15:0]<=16'b1010101100000100;	//Write R3 AD 4
            8'b00001111 :   out[15:0]<=16'b1010101100000101;	//Write R3 AD 5
            8'b00010000 :   out[15:0]<=16'b1010101100000110;	//Write R3 AD 6
			
				8'b00010001 :	 out[15:0]<=16'b1001101011101110;//Jump to address 0
				
				default: 		 out = 16'b0000000000000000; //NOP
        endcase
    end
endmodule // rom_case